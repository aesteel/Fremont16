{
    "contents" : "---\ntitle: \"Exploration for Data Filtering\"\nauthor: \"Anna Steel\"\ndate: \"August 10, 2016\"\noutput: html_document\n---\n\n# Read in Data (assumes script is opened from Fremont16 Rproj)\n``` {r}\nalldf = load(\"Maestros/AllFish.RData\")\n alldf$X <- NULL\n alldf$Y <- NULL\n alldf$Z <- NULL\n\n options(\"digits.secs\"=6)\n alldf$Time = as.POSIXct(as.character(alldf$Time), format=\"%Y-%m-%d %H:%M:%OS\", tz = \"GMT\")\n  dim(alldf) # 222,559 -> this matches the report from VEMCO\n\n# remove exessively high Hpes for ease later\n# alldf=alldf[alldf$Hpes<1000,]  # removes 13 detections\n \n# reduce dataset to only those detections before any receiver removal occured\n alldfg = alldf[alldf$Time < as.POSIXct(\"2015-02-06 00:00\", tz=\"GMT\"),]\n  dim(alldfg) # 168,234 -> this matches the report from VEMCO; 75.6% of the total detections \n\n missdf = alldf[alldf$Time >= as.POSIXct(\"2015-02-06 00:00\", tz=\"GMT\"),]\n\n\n# reduce to HPEs level of 0.5 - see VEMCO documentation and summary word doc\n reddf = alldfg[alldfg$Hpes <=0.5,]\n  dim(reddf) # 88,752 # this matches the report from VEMCO; 52.8% of the detections before 2015-02-06 00:00\n#####\n\n\n  \n# explore the filtered and unfiltered datasets side by side #####\n\n   library(dplyr)\n   library(ggplot2)\n   library(grid) # for the function 'unit' to adjust plot margins with ggplot 1.0 *changes with 2.0\n   library(cowplot)\n\n       ### distribution of HPEs\n  \n          ### Figure 9 in 2015 report###\n        windows(); par(mfrow=c(1,1))\n          ggplot(alldfg[alldfg$Hpes<10,], aes(y=Latitude, x=Longitude, colour=Hpes)) + geom_point(size=1.5) + \n            scale_colour_gradient2(name=\"HPEs\", low = \"green3\", mid=\"yellow\", high = \"red\", midpoint=3, space = \"rgb\", na.value = \"grey50\", guide = \"colourbar\") +\n            ggtitle(\"Unfiltered: Positional HPEs\") +\n            scale_y_continuous(breaks=seq(38.758,38.764,0.001)) + \n            scale_x_continuous(breaks=seq(-121.672, -121.664, 0.001)) +\n            theme_bw() + theme(title=element_text(vjust=2), axis.title.x=element_text(vjust=-.5),axis.title.y=element_text(vjust=1))\n                \n          ### Figure 10 in 2015 report###\n         windows(); par(mfrow=c(1,1))\n          hist(alldfg$Hpes, main=\"Calculated HPEs, all positions\",xlab=\"HPEs\", breaks=150000, xlim=c(0,10))\n          abline(v=0.5, col=\"red\", lty=2)\n\n          \n          ### not in report ###\n         windows(); par(mfrow=c(1,1))\n          hist(alldfg$Hpes[alldfg$Hpes <= 0.5], main=\"Calculated HPEs, filtered positions\",xlab=\"HPEs\", breaks=45)\n          abline(v=0.5, col=\"red\", lty=2)      \n\n         # distributions of detections and positions that were considered for each calculated fish position\n          ### not in report ###\n         windows(); par(mfrow=c(2,2))\n          hist(alldfg$GoodBasicCount, breaks=50, main=\"All Positions:\\nNumber of Good Basic positions \\nper estimated position\", xlab=\"N Good Basic Positions\")\n          hist(reddf$GoodBasicCount, breaks=50, main=\"Positions HPEs<0.5:\\nNumber of Good Basic positions \\nper estimated position\", xlab=\"N Good Basic Positions\")\n      \n          hist(alldfg$DetectionsCount, breaks=25, main=\"All Positions:\\nNumber of Detections \\nper estimated position\", xlab=\"N Detections\")\n          hist(reddf$DetectionsCount, breaks=25, main=\"Positions HPEs<0.5:\\nNumber of Detections \\nper estimated position\", xlab=\"N Detections\")\n      \n         # count the number of fish in each dataframe\n         length(unique(alldfg$Id))  # 490\n         length(unique(reddf$Id))   # 490  great!\n\n\n   # calculate the number of positions per fish\n          #    all.npf = alldfg %>%\n          #      group_by(Id) %>%\n          #      summarize(npos.all=n())\n\n   all.npf = aggregate(alldfg$Id, by=list(alldfg$Id), FUN=length)\n    names(all.npf) = c(\"Id\",\"npos.all\")\n\n           summary(all.npf$npos.all)\n           sort(boxplot.stats(all.npf$npos.all)$out)\n            outlierfish.all = all.npf[all.npf$npos.all %in% sort(boxplot.stats(all.npf$npos.all)$out),]\n        \n           # look at the tracks of those fish with 'too many' positions before filtering\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% outlierfish.all$Id,], aes(x=Longitude, y=Latitude)) + geom_point() +\n              facet_wrap(~Id, ncol=4) + ggtitle(\"Tracks for outliers, positions not filtered\")\n\n          #    red.npf = reddf %>%\n          #      group_by(Id) %>%\n          #      summarize(npos.red= n())\n   red.npf = aggregate(reddf$Id, by=list(reddf$Id), FUN=length)\n    names(red.npf) = c(\"Id\",\"npos.red\")\n\n           summary(red.npf$npos.red)   \n           sort(boxplot.stats(red.npf$npos.red)$out)  # highlight these fish for later exploration as predators\n            outlierfish.red = red.npf[red.npf$npos.red %in% sort(boxplot.stats(red.npf$npos.red)$out),]\n        \n           # look at the tracks of those fish with 'too many' positions even after filtering\n           windows()\n           ggplot(data=reddf[reddf$Id %in% outlierfish.red$Id,], aes(x=Longitude, y=Latitude)) + geom_point() +\n              facet_wrap(~Id, ncol=4) + ggtitle(\"Tracks for outliers, positions filtered HPEs<0.5\")\n\n  comp.npf = merge(all.npf, red.npf, by=\"Id\")\n   comp.npf$perc.remain = comp.npf$npos.red / comp.npf$npos.all\n   \n   \n   \n### Figure 8 in report ###\n          windows(); par(mfrow=c(1,1))\n#            hist(comp.npf$npos.all, xlim=c(0,500), breaks=1000, ylim=c(0,120), col=\"grey95\",\n#                 main=\"Unfiltered: Positions per Fish\", xlab=\"N Positions\")\n          unfilt.ppf = ggplot(data = comp.npf, aes(npos.all)) + \n            geom_histogram(binwidth=35, col=I(\"black\"), fill=\"grey95\") + \n            ggtitle(\"Unfiltered\nPositions per Fish\") + \n            scale_x_continuous(breaks=seq(0,500,100), limits=c(0,500)) + \n            scale_y_continuous(breaks=seq(0,80,20), limits=c(0,80)) + \n            xlab(\"N Positions\") + ylab(\"Frequency\") + \n            theme_bw() + \n            theme(title=element_text(vjust=2), \n                  axis.title.x=element_text(vjust=-.5),\n                  axis.title.y=element_text(vjust=1.2),\n                  plot.margin=unit(c(1,1,1.25,1), \"cm\"))\n          unfilt.ppf\n       \n#           windows(); par(mfrow=c(1,2))\n#            hist(comp.npf$npos.all, xlim=c(0,500), breaks=1000, ylim=c(0,130), col=\"grey95\",\n#                 main=\"All Positionsn/Number of positions per fish\", xlab=\"N Positions\")\n#            hist(comp.npf$npos.red, xlim=c(0,500), breaks=200, ylim=c(0,130), col=\"grey95\",\n#                 main=\"Positions HPEs <0.5\\nNumber of positions per fish\", xlab=\"N Positions\")\n#           windows(); par(mfrow=c(1,1))\n#            hist(comp.npf$perc.remain, ylim=c(0,100), col=\"grey95\",\n#                 main=\"Proportion of positions per fish\\nremaining at HPEs<0.5\", xlab=\"Proportion\")\n\n                      \n               \n### Figure 10 in 2015 report###\n       filtlevel = ggplot(data = alldfg, aes(Hpes)) + \n            geom_histogram(binwidth=.2, col=I(\"black\"), fill=\"grey95\") + \n            ggtitle(\"Calculated HPEs, all positions\") + \n            scale_x_continuous(breaks=seq(0,10,2), limits=c(0,10)) + \n            xlab(\"HPEs\") + ylab(\"Frequency\") + \n            theme_bw() + \n            theme(title=element_text(vjust=2), \n                  axis.title.x=element_text(vjust=-.5),\n                  axis.title.y=element_text(vjust=1.2),\n                  plot.margin=unit(c(1,1,1.25,1), \"cm\")) +\n            geom_vline(xintercept = 0.5, col=\"red\", lty=2) + \n            annotate(\"text\",x=0.6, y=50100, label=\"HPEs = 0.5\", col=\"red\", adj=0, size=4)\n       #windows()\n        #filtlevel\n\n       filt.ppf = ggplot(data = comp.npf, aes(npos.red)) + \n            geom_histogram(binwidth=25, col=I(\"black\"), fill=\"grey95\") + \n            ggtitle(\"Filtered at HPEs<0.5:\n\nPositions per Fish\") +  # this line must be justified like this to get the title correct\n            scale_x_continuous(breaks=seq(0,500,100), limits=c(0,500)) + \n            scale_y_continuous(breaks=seq(0,70,20), limits=c(0,70)) + \n            xlab(\"N Positions\") + ylab(\"Frequency\") + \n            theme_bw() + \n            theme(title=element_text(vjust=2), \n                  axis.title.x=element_text(vjust=-.5),\n                  axis.title.y=element_text(vjust=1.2),\n                  plot.margin=unit(c(.1,1,.75,.5), \"cm\"))\n        #filt.ppf\n           \n            \n       filt.proprem = ggplot(data = comp.npf, aes(perc.remain)) + \n            geom_histogram(binwidth=.04, col=I(\"black\"), fill=\"grey95\") + \n            ggtitle(\"\nProportion Positions \nRemaining per Fish\") +  # this line must be justified like this to get the title correct\n            scale_x_continuous(breaks=seq(0,1,.2), limits=c(0,1)) + \n            scale_y_continuous(breaks=seq(0,85,20), limits=c(0,85)) + \n            xlab(\"Proportion\") + ylab(\"Frequency\") + \n            theme_bw() + \n            theme(title=element_text(vjust=2), \n                  axis.title.x=element_text(vjust=-.5),\n                  axis.title.y=element_text(vjust=1.2),\n                  plot.margin=unit(c(.1,1,.75,.5), \"cm\"))\n        #filt.proprem\n        \n       png(\"Graphics/Figure10_Filtered_ComboFigure.png\", width=8, height=4.75, units=\"in\", res=300)\n        ggdraw() + \n          draw_plot(filtlevel, x=0,y=0,width=.6, height=1) + \n          draw_plot(filt.ppf, x=.6,y=.475,width=.4, height=0.45) + \n          draw_plot(filt.proprem, x=.6,y=0.025,width=.4, height=0.45) +  \n          draw_plot_label(label=c(\"A\",\"B\",\"C\"), x=c(0.05,0.62,0.62), y=c(.975,.88,.45), size=16)\n        dev.off()\n        \n        \n        \n  # look at fish which have a large proportion of positions removed (<=70%) vs those that don't (<=20%)\n   poorHpes = comp.npf[comp.npf$perc.remain<=.3,]  # 11 fish\n   #goodHpes = comp.npf[comp.npf$perc.remain>=.7,]  # 105 fish\n   goodHpes = comp.npf[comp.npf$perc.remain>=.8,]  # 10 fish\n\n        \n           # where are the errors in the 'bad' tracks?\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% poorHpes$Id & alldfg$Hpes<100,], aes(x=Longitude, y=Latitude, color=(Hpes))) + geom_point() + \n              facet_wrap(~Id, ncol=4) + scale_colour_gradientn(colours=rainbow(5))\n        \n           # does the track change significantly when the poor Hpes points are removed? No\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% poorHpes$Id,], aes(x=Longitude, y=Latitude)) + geom_point() + \n              facet_wrap(~Id, ncol=4) + ggtitle(\"'Poor' tracks with no filtering\")\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% poorHpes$Id & alldfg$Hpes<0.5,], aes(x=Longitude, y=Latitude)) + geom_point() + \n              facet_wrap(~Id, ncol=4) + ggtitle(\"'Poor' tracks filtered at HPEs < 0.5\")\n        \n        \n           # where are the errors when we consider the 'good' tracks??\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% goodHpes$Id,], aes(x=Longitude, y=Latitude, color=Hpes)) + geom_point() +\n              facet_wrap(~Id, ncol=4) + scale_colour_gradientn(colours=rainbow(5))\n        \n           # does the track change significantly when the poor Hpes points are removed? No\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% goodHpes$Id,], aes(x=Longitude, y=Latitude)) + geom_point() +\n              facet_wrap(~Id, ncol=4) + ggtitle(\"'Good' tracks with no filtering\")\n           windows()\n           ggplot(data=alldfg[alldfg$Id %in% goodHpes$Id & alldfg$Hpes<0.5,], aes(x=Longitude, y=Latitude)) + geom_point() +\n              facet_wrap(~Id, ncol=4) + ggtitle(\"'Good' tracks filtered at HPEs < 0.5\")\n#####\n\n\n\n# Look at plots to pull tagIDs for potential predators based on upstream (or round-about) 2D movement #####\n           windows()\n             highN.red = red.npf[red.npf$npos.red >= quantile(red.npf$npos.red, .95),]\n             ggplot(data=reddf[reddf$Id %in% highN.red$Id,], aes(x=Longitude, y=Latitude)) + geom_path(aes(colour=as.POSIXlt(Time)$hour)) +\n                facet_wrap(~Id, ncol=5) + scale_colour_gradientn(colours=rainbow(6)) + ggtitle(\"Highest 5% N positions, positions filtered HPEs<0.5\")\n\n\n# Look at arrival and departure times and locations\n fl.df = reddf %>%\n    group_by(Id) %>%\n    slice(c(1,n()))\n fl.df = as.data.frame(fl.df)\n fl.df$fl = rep(c(\"F\",\"L\"),490)  \n\n  ff = fl.df[fl.df$fl==\"F\",c(\"Id\",\"Time\",\"Latitude\",\"Longitude\")] \n   names(ff) = c(\"Id\",\"F.time\",\"F.lat\",\"F.long\")\n  ll = fl.df[fl.df$fl==\"L\",c(\"Id\",\"Time\",\"Latitude\",\"Longitude\")]\n   names(ll) = c(\"Id\",\"L.time\",\"L.lat\",\"L.long\")\n\n fl.df2 = merge(ff,ll)\n\n # calculate passage time through array, and look at long pass times\n fl.df2$arraytime_min = as.numeric(difftime(fl.df2$L.time, fl.df2$F.time))\n           hist(fl.df2$arraytime_min, breaks=50)\n  long.fish = fl.df2[fl.df2$arraytime_min > 300,]$Id\n    # 49654, 56029, 43794, 59051\n\n # calculate location of final detection; upstream?  \n           windows(); par(mfrow=c(1,1)); hist(fl.df2$L.long); abline(v=-121.6679,col=\"red\", lty=2)\n  upfish = fl.df2[fl.df2$L.long < -121.6679,]$Id\n    # 49654, 56029\n\n\n#####\n\n\n\n\n\n# Pull tagIDs from schooling groups to consider with the downstream dataset #####\n  # input tag IDs manually\n  p2 = c(39788, 39791, 39795, 30789, 39793, 48391, 48395, 48384)\n  p3 = c(49651, 48393, 37210, 37203, 37201)\n  p4 = c(49624, 49618)\n  p5 = c(39803, 48372)\n  p6 = c(56904, 51619) # not likely predator?\n  p7 = c(56879, 56046)\n  p8 = c(51112, 59079, 51122, 51113)\n  p9 = c(59061, 51119)\n  p10 = c(59078, 59063, 51123, 51121)\n  p11 = c(51118, 51115)\n  p12 = c(56055, 56050) # not likely predator?\n  \n  pospreds = c(p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12)\n\n# read in migration array detection files\n msdf = read.csv(\"C:/Users/Anna/Documents/03_SacBankUSACE/DATA/FY15/RawData/FY15Detections_corrected_2015-5-7_missingStuckReceivers.csv\")\n  msdf = msdf[,c(1,2,3,4)]\n  names(msdf) = c(\"DateUTC\",\"TimeUTC\",\"RecFull\",\"TagFull\")\n\n  # split rec and tag into parts\n   source(\"Functions_Vemco.R\")\n   msdf$TagID = split.func.tag(as.character(msdf$TagFull))\n   msdf$Rec   = split.func.rec(as.character(msdf$RecFull))\n\n  # set time properly\n  msdf$datetime = as.POSIXct(paste(msdf$DateUTC, msdf$TimeUTC), format=\"%Y-%m-%d %H:%M:%S\", tz=\"GMT\")\n\n  # convert receiverID to stationID, as rivermile this year\n  rec.to.rm = read.csv(\"C:/Users/Anna/Documents/03_SacBankUSACE/FremontWeir/DATA/Maestro_Receivers_to_MS.csv\")\n   rec.to.rm = rec.to.rm[,c(\"RecSN180\",\"RM\")]\n  msdf2 = merge(msdf, rec.to.rm, by.x=\"Rec\", by.y=\"RecSN180\", all.x=TRUE)\n\n\n# pull data from the migration array for each fish, and assign it a predator grouping\n msdf.pred = msdf2[msdf2$TagID %in% pospreds,]\n  msdf.pred$DateUTC = NULL\n  msdf.pred$TimeUTC = NULL\n  msdf.pred$RecFull = NULL\n  msdf.pred$TagFull = NULL\nmsdf.pred$predgroup = NA\n\n   msdf.pred[msdf.pred$TagID %in% p2,]$predgroup <- \"p02\"\n   msdf.pred[msdf.pred$TagID %in% p3,]$predgroup <- \"p03\"\n   msdf.pred[msdf.pred$TagID %in% p4,]$predgroup <- \"p04\"\n   msdf.pred[msdf.pred$TagID %in% p5,]$predgroup <- \"p05\"\n   msdf.pred[msdf.pred$TagID %in% p6,]$predgroup <- \"p06\"\n   msdf.pred[msdf.pred$TagID %in% p7,]$predgroup <- \"p07\"\n   msdf.pred[msdf.pred$TagID %in% p8,]$predgroup <- \"p08\"\n   msdf.pred[msdf.pred$TagID %in% p9,]$predgroup <- \"p09\"\n   msdf.pred[msdf.pred$TagID %in% p10,]$predgroup <- \"p10\"\n   msdf.pred[msdf.pred$TagID %in% p11,]$predgroup <- \"p11\"\n   msdf.pred[msdf.pred$TagID %in% p12,]$predgroup <- \"p12\"\n\n\n# for each predator group, I want to look at the arrival times at each station for each fish, and quantify how close they are in time to one another\n groupedmsdf = msdf.pred %>%\n  group_by(TagID, RM) %>%\n  slice(1)\n \n # plot them by river mile\n windows()\n  school.rm = ggplot(data=as.data.frame(groupedmsdf), aes(y=RM, x=datetime, group=TagID, colour=TagID)) + \n    geom_line() + geom_point() + facet_wrap(~predgroup, ncol=4) + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=10))\n\n # and create dataframes to look at quantitative time differences  \n pg = sort(unique(groupedmsdf$predgroup))\n rm = rev(sort(unique(groupedmsdf$RM)))\n \n for(i in 1:length(pg))\n  {\n   if(\"diff.df\" %in% ls()) { rm(diff.df) }\n      for ( j in 1:length(rm))\n       {\n         temp = groupedmsdf[groupedmsdf$predgroup==pg[i] & groupedmsdf$RM==rm[j],]\n          if(nrow(temp)<2 & j==length(rm)) {write.csv(diff.df, paste(\"PredGroup_\",pg[i],\"_MigStationDetections.csv\",sep=\"\")); break}\n          if(nrow(temp)<2 & j!=length(rm)) {next}\n         cmb <- cbind(as.data.frame(t(combn(temp$TagID,2))),as.data.frame(t(combn(as.POSIXct(temp$datetime),2))))\n           names(cmb) = c(\"TagID1\",\"TagID2\",\"time.sec1\", \"time.sec2\")\n         cmb$predgroup = pg[i]\n         cmb$timedif_min <- (cmb[,3] - cmb[,4])/60\n         \n         if(\"diff.df\" %in% ls())  {priorname = names(diff.df)\n                                  diff.df = merge(diff.df, cmb[,c(1,2,6)], by.x=c(\"TagID1\",\"TagID2\"), all.x=TRUE)\n                                  names(diff.df) = c(priorname, paste(\"dif_min_rm\",rm[j],sep=\"\")) } else {diff.df = data.frame(cmb[,c(1,2,5,6)])\n                                                                                                          names(diff.df) = c(\"TagID1\",\"TagID2\",\"predgroup\",paste(\"dif_min_rm\",rm[j],sep=\"\")) }\n  \n  \n         if(j==length(rm)) {write.csv(diff.df, paste(\"PredGroup_\",pg[i],\"_MigStationDetections.csv\",sep=\"\"), row.names=FALSE)}\n      }  \n }\n  \n\n# manually check the possible predator groupings at the downstream monitors #####\n\np12.det = msdf[msdf$TagID %in% c(56050, 56055),]\n p12.det.rm70 = p12.det[p12.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p12.det.rm70)\n   p12.det.rm70\n p12.det.rm62 = p12.det[p12.det$Rec %in% c(300634, 455005),]\n   dim(p12.det.rm62)\n   p12.det.rm62\n\np11.det = msdf[msdf$TagID %in% c(51115, 51118),]\n p11.det.rm85 = p11.det[p11.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p11.det.rm85)\n   p11.det.rm85\n p11.det.rm82 = p11.det[p11.det$Rec %in% c(300633, 300828, 300831, 300649),]\n   dim(p11.det.rm82)\n   p11.det.rm82\n p11.det.rm70 = p11.det[p11.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p11.det.rm70)\n   p11.det.rm70\n\np10.det = msdf[msdf$TagID %in% c(51121, 51123,59078),]\n p10.det.rm85 = p10.det[p10.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p10.det.rm85)\n   p10.det.rm85\n p10.det.rm77 = p10.det[p10.det$Rec %in% c(300652,300636,300659,300687,300830),]\n   dim(p10.det.rm77)\n   p10.det.rm77\n p10.det.rm70 = p10.det[p10.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p10.det.rm70)\n   p10.det.rm70[,c(1,2,5)]\n p10.det.rm43 = p10.det[p10.det$Rec %in% c(300679,301090,300661,300641,300669,300834,300689,301092,301088,300664,300644,300681,301093,301101,301083,301094,301084,300678,301089,300662,300676,301099,300675,301091,300660,300674,300690,300691,301085,300069,300656,300658,301097,455004,300695,300835,300663,300579),]\n   dim(p10.det.rm43)\n   p10.det.rm43[,c(1,2,5)]\n\np09.det = msdf[msdf$TagID %in% c(51119, 59061),]\n p09.det.rm70 = p09.det[p09.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p09.det.rm70)\n   p09.det.rm70\n\np08.det = msdf[msdf$TagID %in% c(51112, 51113, 51122, 59079),]\n p08.det.rm85 = p08.det[p08.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p08.det.rm85)\n   p08.det.rm85[,c(1,2,5)]\n p08.det.rm82 = p08.det[p08.det$Rec %in% c(300633, 300828, 300831, 300649),]\n   dim(p08.det.rm82)\n   p08.det.rm82[,c(1,2,5)] \n p08.det.rm77 = p08.det[p08.det$Rec %in% c(300652,300636,300659,300687,300830),]\n   dim(p08.det.rm77)\n   p08.det.rm77[,c(1,2,5)] \n p08.det.rm70 = p08.det[p08.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p08.det.rm70)\n   p08.det.rm70[,c(1,2,5)] \n\n\np07.det = msdf[msdf$TagID %in% c(56046, 56879),]\n p07.det.rm73 = p07.det[p07.det$Rec %in% c(300666,300673,300648,300682,300829),]\n   dim(p07.det.rm73)\n   p07.det.rm73\n p07.det.rm62 = p07.det[p07.det$Rec %in% c(300634,455005),]\n   dim(p07.det.rm62)\n   p07.det.rm62\n p07.det.rm57 = p07.det[p07.det$Rec %in% c(300651,301100),]\n   dim(p07.det.rm57)\n   p07.det.rm57\n\np06.det = msdf[msdf$TagID %in% c(51619, 56904),]\n p06.det.rm87 = p06.det[p06.det$Rec %in% c(300677,300657,300667,300688),]\n   dim(p06.det.rm87)\n   p06.det.rm87\n p06.det.rm85 = p06.det[p06.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p06.det.rm85)\n   p06.det.rm85\n p06.det.rm77 = p06.det[p06.det$Rec %in% c(300652,300636,300659,300687,300830),]\n   dim(p06.det.rm77)\n   p06.det.rm77\n p06.det.rm70 = p06.det[p06.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p06.det.rm70)\n   p06.det.rm70\n\np05.det = msdf[msdf$TagID %in% c(39803, 48372),]\n p05.det.rm85 = p05.det[p05.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p05.det.rm85)\n   p05.det.rm85\n p05.det.rm86 = p05.det[p05.det$Rec %in% c(300646,300672,300654,300693),]\n   dim(p05.det.rm86)\n   p05.det.rm86\n p05.det.rm77 = p05.det[p05.det$Rec %in% c(300652,300636,300659,300687,300830),]\n   dim(p05.det.rm77)\n   p05.det.rm77\n p05.det.rm70 = p05.det[p05.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p05.det.rm70)\n   p05.det.rm70\n \np04.det = msdf[msdf$TagID %in% c(49618, 49624),]\n p04.det.rm86 = p04.det[p04.det$Rec %in% c(300646,300672,300654,300693),]\n   dim(p04.det.rm86)\n   p04.det.rm86\n p04.det.rm85 = p04.det[p04.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p04.det.rm85)\n   p04.det.rm85\n p04.det.rm77 = p04.det[p04.det$Rec %in% c(300652,300636,300659,300687,300830),]\n   dim(p04.det.rm77)\n   p04.det.rm77\n p04.det.rm70 = p04.det[p04.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p04.det.rm70)\n   p04.det.rm70\n\np03.det = msdf[msdf$TagID %in% c(37201,37203,37210,49651),] #48393\n p03.det.rm85 = p03.det[p03.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p03.det.rm85)\n   p03.det.rm85[,c(1,2,5)]\n p03.det.rm82 = p03.det[p03.det$Rec %in% c(300633, 300828, 300831, 300649),]\n   dim(p03.det.rm82)\n   p03.det.rm82[,c(1,2,5)]\n p03.det.rm70 = p03.det[p03.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p03.det.rm70)\n   p03.det.rm70[,c(1,2,5)]\n\np02.det = msdf[msdf$TagID %in% c(39788,39791,39793,39795,48384,48391),]\n p02.det.rm86 = p02.det[p02.det$Rec %in% c(300646,300672,300654,300693),]\n   dim(p02.det.rm86)\n   p02.det.rm86[,c(1,2,5)]\n p02.det.rm85 = p02.det[p02.det$Rec %in% c(300683,301086,300643,301095),]\n   dim(p02.det.rm85)\n   p02.det.rm85[,c(1,2,5)]\n p02.det.rm82 = p02.det[p02.det$Rec %in% c(300633, 300828, 300831, 300649),]\n   dim(p02.det.rm82)\n   p02.det.rm82[,c(1,2,5)]\n p02.det.rm77 = p02.det[p02.det$Rec %in% c(300652,300636,300659,300687,300830),]\n   dim(p02.det.rm77)\n   p02.det.rm77[,c(1,2,5)]\n p02.det.rm70 = p02.det[p02.det$Rec %in% c(301098, 300670, 300671, 301087, 300837),]\n   dim(p02.det.rm70)\n   p02.det.rm70[,c(1,2,5)]\n p02.det.rm62 = p02.det[p02.det$Rec %in% c(300634,455005),]\n   dim(p02.det.rm62)\n   p02.det.rm62[,c(1,2,5)]\n\n#############################\n\n\n# remove those predators from the filtered dataset #####\n  pred.2d = c(49618, 49624, 51119, 59061)\n  pred.up = c(49654, 56029)\n  pred.long = c(59051, 43794)\n  \n  preds = c(pred.2d, pred.up, pred.long)\n  \n  reddf2 = reddf[!(reddf$Id %in% preds),]\n#####\n\n\n# Add run label to each tagID #####\n # read in tagging metadata\n  tagruns = read.csv(\"DATA/Maestro_tagging_WRC-LFC.csv\")\n   tagruns = tagruns[,c(\"Species\",\"ID.Tag\")]\n\n  reddf3 = merge(reddf2, tagruns, by.x=\"Id\", by.y=\"ID.Tag\", all.x=TRUE)\n\n  ## tagID 51616 not in the tagging data. But others in string at WRC, so I'll add that here. No other information on it, however, so may evenutually remove from analysis\n  reddf3[reddf3$Id == 51616,]$Species <- \"WRC\"\n#####\n\n\n\n# plot detections per fish of filtered dataset, by run #####\n  red2.npf = red.npf[!(red.npf$Id%in%preds),]\n  red3.npf = merge(red2.npf, tagruns, by.x=\"Id\", by.y=\"ID.Tag\", all.x=TRUE)\n\n  tt.pval = t.test(red3.npf$npos.red[red3.npf$Species==\"LFC\"],red3.npf$npos.red[red3.npf$Species==\"WRC\"])\n\n  boxplot(red3.npf$npos.red~red3.npf$Species, ylab=\"Number of Positions\")\n   mtext(paste(\"t-test: p =\",round(tt.pval$p.value,7)), side=3, adj=1, cex=.8) \n   mtext(paste(\"mean =\",round(tt.pval$estimate[1],1)), side=1, line=2, adj=.2, cex=.8, font=3) \n   mtext(paste(\"mean =\",round(tt.pval$estimate[2],1)), side=1, line=2, adj=.8, cex=.8, font=3) \n#####",
    "created" : 1470851303075.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2463742671",
    "id" : "192B0687",
    "lastKnownWriteTime" : 1470850480,
    "path" : "~/GitHub/Fremont16/Rcode/Exploration_DataFiltering.Rmd",
    "project_path" : "Rcode/Exploration_DataFiltering.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}